// Code generated by goctl. DO NOT EDIT.

package model_mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productPriceFieldNames          = builder.RawFieldNames(&ProductPrice{})
	productPriceRows                = strings.Join(productPriceFieldNames, ",")
	productPriceRowsExpectAutoSet   = strings.Join(stringx.Remove(productPriceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productPriceRowsWithPlaceHolder = strings.Join(stringx.Remove(productPriceFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheProductPriceIdPrefix = "cache:productPrice:id:"
)

type (
	productPriceModel interface {
		Insert(ctx context.Context, data *ProductPrice) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*ProductPrice, error)
		FindByPage(ctx context.Context, query string) ([]ProductPrice, error)
		Count(ctx context.Context, query string) (int64, error)
		Update(ctx context.Context, data *ProductPrice) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductPriceModel struct {
		sqlc.CachedConn
		table string
	}

	ProductPrice struct {
		Id        int64     `db:"id"`
		ProductId int64     `db:"product_id"` // 产品id
		Price     float64   `db:"price"`      // 产品单价(元)
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newProductPriceModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductPriceModel {
	return &defaultProductPriceModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`product_price`",
	}
}

func (m *defaultProductPriceModel) Delete(ctx context.Context, id int64) error {
	productPriceIdKey := fmt.Sprintf("%s%v", cacheProductPriceIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, productPriceIdKey)
	return err
}

func (m *defaultProductPriceModel) FindOne(ctx context.Context, id int64) (*ProductPrice, error) {
	productPriceIdKey := fmt.Sprintf("%s%v", cacheProductPriceIdPrefix, id)
	var resp ProductPrice
	err := m.QueryRowCtx(ctx, &resp, productPriceIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productPriceRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductPriceModel) FindByPage(ctx context.Context, query string) ([]ProductPrice, error) {
	query = fmt.Sprintf("select %s from %s", productPriceRows, m.table) + query
	var resp []ProductPrice
	err := m.CachedConn.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductPriceModel) Count(ctx context.Context, query string) (int64, error) {
	query = fmt.Sprintf("select %s from %s", productPriceRows, m.table) + query
	var resp []ProductPrice
	err := m.CachedConn.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return int64(len(resp)), nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultProductPriceModel) Insert(ctx context.Context, data *ProductPrice) (sql.Result, error) {
	productPriceIdKey := fmt.Sprintf("%s%v", cacheProductPriceIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?)", m.table, productPriceRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ProductId, data.Price)
	}, productPriceIdKey)
	return ret, err
}

func (m *defaultProductPriceModel) Update(ctx context.Context, data *ProductPrice) error {
	productPriceIdKey := fmt.Sprintf("%s%v", cacheProductPriceIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productPriceRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.ProductId, data.Price, data.Id)
	}, productPriceIdKey)
	return err
}

func (m *defaultProductPriceModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheProductPriceIdPrefix, primary)
}

func (m *defaultProductPriceModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productPriceRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductPriceModel) tableName() string {
	return m.table
}
