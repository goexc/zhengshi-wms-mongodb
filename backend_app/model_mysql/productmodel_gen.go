// Code generated by goctl. DO NOT EDIT.

package model_mysql

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	productFieldNames          = builder.RawFieldNames(&Product{})
	productRows                = strings.Join(productFieldNames, ",")
	productRowsExpectAutoSet   = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	productRowsWithPlaceHolder = strings.Join(stringx.Remove(productFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"

	cacheProductIdPrefix    = "cache:product:id:"
	cacheProductModelPrefix = "cache:product:model:"
)

type (
	productModel interface {
		Insert(ctx context.Context, data *Product) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Product, error)
		FindByPage(ctx context.Context, query string) ([]Product, error)
		Count(ctx context.Context, query string) (int64, error)
		FindOneByModel(ctx context.Context, model string) (*Product, error)
		Update(ctx context.Context, data *Product) error
		Delete(ctx context.Context, id int64) error
	}

	defaultProductModel struct {
		sqlc.CachedConn
		table string
	}

	Product struct {
		Id        int64     `db:"id"`
		ClientId  int64     `db:"client_id"` // 客户id
		Model     string    `db:"model"`     // 产品型号
		Name      string    `db:"name"`      // 产品品名
		Specs     string    `db:"specs"`     // 产品规格
		CreatedAt time.Time `db:"created_at"`
		UpdatedAt time.Time `db:"updated_at"`
	}
)

func newProductModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultProductModel {
	return &defaultProductModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`product`",
	}
}

func (m *defaultProductModel) Delete(ctx context.Context, id int64) error {
	data, err := m.FindOne(ctx, id)
	if err != nil {
		return err
	}

	productIdKey := fmt.Sprintf("%s%v", cacheProductIdPrefix, id)
	productModelKey := fmt.Sprintf("%s%v", cacheProductModelPrefix, data.Model)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, productIdKey, productModelKey)
	return err
}

func (m *defaultProductModel) FindOne(ctx context.Context, id int64) (*Product, error) {
	productIdKey := fmt.Sprintf("%s%v", cacheProductIdPrefix, id)
	var resp Product
	err := m.QueryRowCtx(ctx, &resp, productIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) FindByPage(ctx context.Context, query string) ([]Product, error) {
	query = fmt.Sprintf("select %s from %s", productRows, m.table) + query
	var resp []Product
	err := m.CachedConn.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) Count(ctx context.Context, query string) (int64, error) {
	query = fmt.Sprintf("select %s from %s", productRows, m.table) + query
	var resp []Product
	err := m.CachedConn.QueryRowsNoCacheCtx(ctx, &resp, query)
	switch err {
	case nil:
		return int64(len(resp)), nil
	case sqlc.ErrNotFound:
		return 0, ErrNotFound
	default:
		return 0, err
	}
}

func (m *defaultProductModel) FindOneByModel(ctx context.Context, model string) (*Product, error) {
	productModelKey := fmt.Sprintf("%s%v", cacheProductModelPrefix, model)
	var resp Product
	err := m.QueryRowIndexCtx(ctx, &resp, productModelKey, m.formatPrimary, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) (i interface{}, e error) {
		query := fmt.Sprintf("select %s from %s where `model` = ? limit 1", productRows, m.table)
		if err := conn.QueryRowCtx(ctx, &resp, query, model); err != nil {
			return nil, err
		}
		return resp.Id, nil
	}, m.queryPrimary)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultProductModel) Insert(ctx context.Context, data *Product) (sql.Result, error) {
	productIdKey := fmt.Sprintf("%s%v", cacheProductIdPrefix, data.Id)
	productModelKey := fmt.Sprintf("%s%v", cacheProductModelPrefix, data.Model)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?)", m.table, productRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.ClientId, data.Model, data.Name, data.Specs)
	}, productIdKey, productModelKey)
	return ret, err
}

func (m *defaultProductModel) Update(ctx context.Context, newData *Product) error {
	data, err := m.FindOne(ctx, newData.Id)
	if err != nil {
		return err
	}

	productIdKey := fmt.Sprintf("%s%v", cacheProductIdPrefix, data.Id)
	productModelKey := fmt.Sprintf("%s%v", cacheProductModelPrefix, data.Model)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, productRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, newData.ClientId, newData.Model, newData.Name, newData.Specs, newData.Id)
	}, productIdKey, productModelKey)
	return err
}

func (m *defaultProductModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheProductIdPrefix, primary)
}

func (m *defaultProductModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", productRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultProductModel) tableName() string {
	return m.table
}
