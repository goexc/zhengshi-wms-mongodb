syntax = "v1"

info(
	title: "商城管理后台api"
	desc: "商城管理后台api"
	author: "董咚懂咚"
	email: "1024071953@qq.com"
	version: "v1.0.1"
)

import (
	"apis/base.api"
	"apis/auth.api"
	"apis/api.api"
	"apis/menu.api"
	"apis/role.api"
	"apis/department.api"
	"apis/user.api"
	"apis/personal.api"
	"apis/warehouse.api"
	"apis/company.api"
)

//身份验证
@server (
	group: auth
	prefix: auth
)

service main{
	@doc "注册"
	@handler register
	post /register(RegisterRequest) returns(RegisterResponse)
	
	@doc "登录"
	@handler login
	post /login(LoginRequest) returns(LoginResponse)
}

// 菜单管理
@server(
	jwt: Auth
	group: menu
	prefix: menu
)

service main {
	@doc "菜单分页"
	@handler list
	get / returns (MenusResponse)
	
	@doc "添加菜单"
	@handler add
	post / (MenuRequest) returns (BaseResponse)
	
	@doc "修改菜单"
	@handler update
	put / (MenuRequest) returns (BaseResponse)
	
	@doc "删除菜单"
	@handler remove
	delete / (MenuRemoveRequest) returns (BaseResponse)
}

// api管理
@server(
	jwt: Auth
	group: api
	prefix: api
)

service main {
	@doc "api分页"
	@handler list
	get / returns (ApisResponse)
	
	@doc "添加api"
	@handler add
	post / (ApiAddRequest) returns (BaseResponse)
	
	@doc "修改api"
	@handler update
	put / (ApiUpdateRequest) returns (BaseResponse)
	
	@doc "删除api"
	@handler remove
	delete / (ApiIdRequest) returns (BaseResponse)
}

// 角色管理
@server(
	jwt: Auth
	group: role
	prefix: role
)

service main {
	@doc "角色分页"
	@handler list
	get / (RoleListRequest) returns (RoleListResponse)
	
	@doc "添加角色"
	@handler add
	post / (RoleRequest) returns (BaseResponse)
	
	@doc "修改角色"
	@handler update
	put / (RoleRequest) returns (BaseResponse)
	
	@doc "删除角色"
	@handler remove
	delete / (RoleIdRequest) returns (BaseResponse)
	
	@doc "更改角色状态"
	@handler status
	patch /status (RoleStatusRequest) returns (BaseResponse)
	
	@doc "角色的菜单列表"
	@handler menus
	get /menus (RoleIdRequest) returns (RoleMenusResponse)
	
	@doc "分配角色菜单"
	@handler menuDistribute
	post /menus (RoleMenusRequest) returns (BaseResponse)
	
	@doc "角色的api列表"
	@handler apis
	get /apis (RoleIdRequest) returns (RoleApisResponse)
	
	@doc "分配角色api"
	@handler apiDistribute
	post /apis (RoleApisRequest) returns (BaseResponse)
	
}

// 部门管理
@server(
	jwt: Auth
	group: department
	prefix: department
)

service main {
	@doc "部门列表"
	@handler list
	get / returns (DepartmentsResponse)
	
	@doc "添加部门"
	@handler add
	post / (DepartmentRequest) returns (BaseResponse)
	
	@doc "修改部门"
	@handler update
	put / (DepartmentRequest) returns (BaseResponse)
	
	@doc "删除部门"
	@handler remove
	delete / (DepartmentRemoveRequest) returns (BaseResponse)
}

// 用户管理
@server(
	jwt: Auth
	group: user
	prefix: user
)

service main {
	@doc "用户分页"
	@handler list
	get / (UserListRequest) returns (UserListResponse)
	
	@doc "添加用户"
	@handler add
	post / (UserAddRequest) returns (BaseResponse)
	
	@doc "修改用户"
	@handler update
	put / (UserUpdateRequest) returns (BaseResponse)
	
	@doc "删除用户"
	@handler remove
	delete / (UserIdRequest) returns (BaseResponse)
	
	@doc "管理员修改用户密码"
	@handler changePassword
	patch /password (ChangePasswordRequest) returns (BaseResponse)
	
	@doc "管理员更改用户状态"
	@handler status
	patch /status (UserStatusRequest) returns (BaseResponse)
}

// 个人中心
@server(
	jwt: Auth
	group: personal
	prefix: personal
)

service main {
	@doc "个人信息"
	@handler profile
	get /profile returns (ProfileResponse)
	
	@doc "修改个人信息"
	@handler editProfile
	put /profile(ProfileRequest) returns (BaseResponse)
	
	@doc "修改个人密码"
	@handler changePassword
	patch /password(ProfilePasswordRequest) returns (BaseResponse)
	
	@doc "修改个人头像"
	@handler changeAvatar
	patch /avatar(ProfileAvatarRequest) returns (BaseResponse)
	
	@doc "个人全部菜单"
	@handler menu
	get /menu returns (MenusResponse)
	
}

// 企业信息
@server(
	jwt: Auth
	group: company
	prefix: company
)

service main {
	@doc "获取企业信息"
	@handler get
	get / returns (CompanyResponse)
	
	@doc "修改企业信息"
	@handler update
	put / (CompanyRequest) returns (BaseResponse)
}